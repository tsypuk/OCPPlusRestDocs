---1 chapter1
Q: What is the result of the following code?
1: public class Employee {
2:      public int employeeId;
3:      public String firstName, lastName;
4:      public int yearStarted;
5:      @Override public int hashCode() {
6:          return employeeId;
7:      }
8:      public boolean equals(Employee e) {
9:          return this.employeeId == e.employeeId;
10:     }
11:     public static void main(String[] args) {
12:         Employee one = new Employee();
13:         one.employeeId = 101;
14:         Employee two = new Employee();
15:         two.employeeId = 101;
16:         if (one.equals(two)) System.out.println("Success");
17:         else System.out.println("Failure");
18: }}
A.+ Success
B.- Failure
C.- The hashCode() method fails to compile.
D.- The equals() method fails to compile.
E.- Another line of code fails to compile.
F.- A runtime exception is thrown.
Y: A. Based on the equals() method in the code, objects are equal if they have the same employeeId. The hashCode() method correctly overrides the one from Object. The equals() method is an overload of the one from Object and not an override. It would be better to pass Object since an override would be better to use here. It is odd to override hashCode() and not equals().
---2 chapter1
Q: What is the result of compiling the following class?
1:   public class Book {
2:      private int ISBN;
3:      private String title, author; private int pageCount;
4:      public int hashCode() {
5:          return ISBN;
6:      }
7:      @Override public boolean equals(Object obj) {
8:          if ( !(obj instanceof Book)) {
9:          return false;
10:         }
11:     Book other = (Book) obj;
12:     return this.ISBN == other.ISBN;
13:     }
14:   // imagine getters and setters are here }
A.+ The code compiles.
B.- The code does not compile because hashCode() is incorrect.
C.- The code does not compile because equals() does not override the parent method correctly.
D.- The code does not compile because equals() tries to refer to a private field.
E.- The code does not compile because the ClassCastException is not handled or
declared.
F.- The code does not compile for another reason.
Y: A. hashCode() is correct and perfectly reasonable given that equals() also checks that field. ClassCastException is a runtime exception and therefore does not need to be han- dled or declared. The override in equals() is correct. It is common for equals() to refer to a private instance variable. This is legal because it is within the same class, even if it is referring to a different object of the same class.
---3 chapter1
Q: What is the result of the following code?
1:  String s1 = "Canada";
2:  String s2 = new String(s1);
3:  if(s1 == s2) System.out.println("s1 == s2");
4:  if(s1.equals(s2)) System.out.println("s1.equals(s2)");
A.- There is no output.
B.- s1 == s2
C.+ s1.equals(s2)
D.- Both B and C.
E.- The code does not compile.
F.- The code throws a runtime exception.
Y: C. s1 points to the string pool. s2 points to an object on the heap, since it is created at runtime. == checks for reference equality. These are different references, making B incorrect. String overrides equals() so the actual values are the same, making C correct. And yes, this question could have appeared on the OCA. Remember that the OCP is cumulative. A question may appear to be about one thing and actually be about a simpler concept.
---4 chapter1
Q: What is true about the following code? You may assume city and mascot are never null.
1:  public class BaseballTeam {
2:      private String city, mascot;
3:      private int numberOfPlayers;
4:      public boolean equals(Object obj) {
5:          if ( !(obj instanceof BaseballTeam))
6:              return false;
7:          BaseballTeam other = (BaseballTeam) obj;
8:          return (city.equals(other.city) && mascot.equals(other.mascot));
9:  }
10:     public int hashCode() {
11:         return numberOfPlayers;
12:     }
13: //  imagine getters and setters are here
14: }
A.- The class does not compile.
B.- The class compiles but has an improper equals() method.
C.+ The class compiles but has an improper hashCode() method.
D.- The class compiles and has proper equals() and hashCode() methods.
Y: C. The equals() method is correct. You are allowed to use any business logic that you want in determining equality. The hashCode() method is not correct. It violates the rule that two objects that return true for equals() must return the same hashCode(). It is also a bad idea for the hash code to contain values that could change.
---5 chapter1
Q: Which of the following statements are true, assuming a and b are String objects? (Choose all that apply.)
A.+ If a.equals(b) is true, a.hashCode() == b.hashCode() is always true.
B.- If a.equals(b) is true, a.hashCode() == b.hashCode() is sometimes but not always true.
C.- If a.equals(b) is false, a.hashCode() == b.hashCode() can never be true.
D.+ If a.equals(b) is false, a.hashCode() == b.hashCode() can sometimes be true.
Y: A, D. The relevant rule is that two objects that return true for equals() objects must return the same hash code. Therefore A is correct and B is incorrect. Two objects with the same hash code may or may not be equal. This makes C incorrect and D correct. The fact that two objects are not equal does not guarantee or preclude them from sharing a hash code. Remember that hashCode() tells you which bucket to look in and equals() tells you whether you have found an exact match.
---6 chapter1
Q: What is the result of the following code?
1:   public class FlavorsEnum {
2:      enum Flavors {
3:         VANILLA, CHOCOLATE, STRAWBERRY
4:      }
5:      public static void main(String[] args) {
6:          System.out.println(Flavors.CHOCOLATE.ordinal());
7:      }
8:  }
A.- 0
B.+ 1
C.- 9
D.- CHOCOLATE
E.- The code does not compile due to a missing semicolon.
F.- The code does not compile for a different reason.
Y: B. The ordinal() method of an enum returns its corresponding int value. Like arrays, enums are zero based. Remember that the index of an enum may change when you recompile the code and should not be used for comparison.
---7 chapter1
Q: What is the result of the following code? (Choose all that apply.)
1:  public class IceCream {
2:      enum Flavors {
3:          VANILLA, CHOCOLATE, STRAWBERRY
4:      }
5:      public static void main(String[] args) {
6:          Flavors f = Flavors.STRAWBERRY;
7:          switch (f) {
8:              case 0: System.out.println("vanilla");
9:              case 1: System.out.println("chocolate");
10:             case 2: System.out.println("strawberry");
11:                 break;
12:             default: System.out.println("missing flavor");
13:  }}}
A.- vanilla
B.- chocolate
C.- strawberry
D.- missing flavor
E.+ The code does not compile.
F.- An exception is thrown.
Y: E. A case statement on an enum data type must be the unqualified name of an enumeration constant. For example, case VANILLA would be valid. You cannot use the ordinal equiva- lents. Therefore, the code does not compile.
---8 chapter1
Q: What is the result of the following code?
1:  public class Outer {
2:      private int x = 5;
3:      protected class Inner {
4:          public static int x = 10;
5:          public void go() { System.out.println(x); }
6:      }
7:      public static void main(String[] args) {
8:          Outer out = new Outer();
9:          Outer.Inner in = out.new Inner();
10:         in.go();
11: }}
A.- The output is 5.
B.- The output is 10.
C.+ Line 4 generates a compiler error.
D.- Line 8 generates a compiler error.
E.- Line 9 generates a compiler error.
F.- An exception is thrown.
Y: C. Inner is a member inner class. Inner classes are not allowed to contain static methods or static variables. Only nested static classes are permitted to contain statics.
---9 chapter1
What is the result of the following code?
1:  public class Outer {
2:      private int x = 24;
3:      public int getX() {
4:          String message = "x is ";
5:          class Inner {
6:              private int x = Outer.this.x;
7:              public void printX() {
8:                  System.out.println(message + x);
9:              }
10:         }
11:         Inner in = new Inner();
12:         in.printX();
13:         return x;
14:     }
15:     public static void main(String[] args) {
16:         new Outer().getX();
17: }}
A.- x is 0.
B.+ x is 24.
C.- Line 6 generates a compiler error.
D.- Line 8 generates a compiler error.
E.- Line 11 generates a compiler error.
F.- An exception is thrown.
Y: B. Outer.this.x is the correct way to refer to x in the Outer class. In Java 7, the answer would have been D because you used to have to declare variables as final to use them in a local inner class. In Java 8, this requirement was dropped and the variables only need to be effectively final, which means that the code would still compile if final were added.
---10 chapter1
Q: The following code appears in a file named Book.java. What is the result of compiling the source file ?
1:  public class Book {
2:      private int pageNumber;
3:      private class BookReader {
4:          public int getPage() {
5:              return pageNumber;
6:  }}}
A.- The code compiles successfully, and one bytecode file is generated: Book.class.
B.- The code compiles successfully, and two bytecode files are generated: Book.class and BookReader.class.
C.+ The code compiles successfully, and two bytecode files are generated: Book.class and Book$BookReader.class.
D.- A compiler error occurs on line 3.
E.- A compiler error occurs on line 5.
Y: C. The code compiles fine. A member inner class is allowed to be private, and it is allowed to refer to instance variables from the outer class. Two .class files are generated. Book.class matches the name of the outer class. The inner class does not compile to BookReader.class. That would introduce the possibility of a naming conflict. Book$BookReader.class is correct because it shows the scope of the class is limited to Book. You don’t need to know that $ is the syntax, but you do need to know the number of classes and that BookReader is not a top-level class.
---11 chapter1
Q:  Which of the following statements can be inserted to make FootballGame compile?
1:  package my.sports;
2:  public class Football {
3:      public static final int TEAM_SIZE = 11;
4:  }
1:  package my.apps;
2:  // INSERT CODE HERE
3:  public class FootballGame {
4:      public int getTeamSize() { return TEAM_SIZE; }
5:  }
A.- import my.sports.Football;
B.- import static my.sports.*;
C.- import static my.sports.Football;
D.+ import static my.sports.Football.*;
E.- static import my.sports.*;
F.- static import my.sports.Football;
G.- static import my.sports.Football.*;
Y: D. FootballGame is trying to refer to a static variable in another class. It needs a static import to do so. The correct syntax is import static and not static import. B is incorrect because * does not import classes in a package. C is incorrect because it does not refer to a static member.
---12 chapter1
Q: What is the result of the following code?
1:  public class Browsers {
2:      static class Browser {
3:          public void go() {
4:              System.out.println("Inside Browser");
5:          }
6:      }
7:      static class Firefox extends Browser {
8:          public void go() {
9:              System.out.println("Inside Firefox");
10:         }
11:     }
12:     static class IE extends Browser {
13:         @Override public void go() {
14:             System.out.println("Inside IE");
15:         }
16:     }
17:     public static void main(String[] args) {
18:         Browser b = new Firefox();
19:         IE e = (IE) b;
20:         e.go();
21:     }
22: }
A.- Inside Browser
B.- Inside Firefox
C.- Inside IE
D.- The code does not compile.
E.+ A runtime exception is thrown.
Y: E. The main method tries to cast a Firefox instance to IE. Since IE is not a subclass of Firefox, this throws a ClassCastException.
---13 chapter1
Q: Which is a true statement about the following code?
1:  public class IsItFurry {
2:      static interface Mammal { }
3:      static class Furry implements Mammal { }
4:      static class Chipmunk extends Furry { }
5:      public static void main(String[] args) {
6:          Chipmunk c = new Chipmunk();
7:          Mammal m = c;
8:          Furry f = c;
9:          int result = 0;
10:         if (c instanceof Mammal) result += 1;
11:         if (c instanceof Furry) result += 2;
12:         if (null instanceof Chipmunk) result += 4;
13:         System.out.println(result);
14:    }
15: }
A.- The output is 0.
B.+ The output is 3.
C.- The output is 7.
D.- c instanceof Mammal does not compile.
E.- c instanceof Furry does not compile.
F.- null instanceof Chipmunk does not compile.
Y: B. c is an instance of Chipmunk. It is an instance of any superclasses or interfaces it imple- ments. In this case, those are Furry, Mammal, and Object. null is not an instance of any type. Therefore, the first two if statements execute and result is 3.
---14 chapter1
Q: Which is a true statement about the following code? (Choose all that apply.)
1:  import java.util. *;
2:  public class IsItFurry {
3:      static class Chipmunk { }
4:      public static void main(String[] args) {
5:          Chipmunk c = new Chipmunk();
6:          ArrayList <Chipmunk> l = new ArrayList<>();
7:          Runnable r = new Thread();
8:          int result = 0;
9:          if (c instanceof Chipmunk) result += 1;
10:         if (l instanceof Chipmunk) result += 2;
11:         if (r instanceof Chipmunk) result += 4;
12:         System.out.println(result);
13:     }
14: }
A.- The code compiles, and the output is 0.
B.- The code compiles, and the output is 3.
C.- The code compiles, and the output is 7.
D.- c instanceof Chipmunk does not compile.
E.+ l instanceof Chipmunk does not compile.
F.- r instanceof Chipmunk does not compile.
Y: E. Code involving instanceof does not compile when there is no way for it to evaluate true. D not only compiles but it is always true. E does not compile because ArrayList is a concrete class that does not extend Chipmunk. F does compile because Runnable is an interface. In theory, someone could subclass Chipmunk and have the subclass implement Runnable.
---15 chapter1
Q: Which of the following statements are true about the equals() method? (Choose all that apply.)
A.- If equals(null) is called, the method should throw an exception.
B.+ If equals(null) is called, the method should return false.
C.- If equals(null) is called, the method should return true.
D.- If equals() is passed the wrong type, the method should throw an exception.
E.+ If equals() is passed the wrong type, the method should return false.
F.- If equals() is passed the wrong type, the method should return true.
Y: B, E. equals() should return false when the object it passed in is not equal to the cur- rent object. This includes null and incorrect types. An equals() method should have a null check and an instanceof check.
---16 chapter1
Q: Which of the following can be inserted in main?
1:  public class Outer {
2:      class Inner { }
3:          public static void main(String[] args) {
4:          // INSERT CODE HERE
5:          }
6:  }
A.- Inner in = new Inner();
B.- Inner in = Outer.new Inner();
C.- Outer.Inner in = new Outer.Inner();
D.- Outer.Inner in = new Outer().Inner();
E.+ Outer.Inner in = new Outer().new Inner();
F.- Outer.Inner in = Outer.new Inner();
Y: E. This is a member inner class. It needs to be created using an instance of the outer class. The syntax looks weird, but it creates an object of the outer class and then an object of the inner class from it.
---17 chapter1
Q: What is the result of the following code? (Choose all that apply.)
1:  public enum AnimalClasses {
2:      MAMMAL(true), FISH(Boolean.FALSE), BIRD(false),
3:      REPTILE(false), AMPHIBIAN(false), INVERTEBRATE(false)
4:      boolean hasHair;
5:      public AnimalClasses(boolean hasHair) {
6:          this.hasHair = hasHair;
7:      }
8:      public boolean hasHair() {
9:          return hasHair;
10:     }
11:     public void giveWig() {
12:         hasHair = true;
13:     }
14: }
A.- Compiler error on line 2.
B.+ Compiler error on line 3.
C.+ Compiler error on line 5.
D.- Compiler error on line 8.
E.- Compiler error on line 12.
F.- Compiler error on another line.
G.- The code compiles successfully.
Y: B, C. Enums are required to have a semicolon after the list of values if there is anything else in the enum. Don’t worry; you won’t be expected to track down missing semicolons on the whole exam—only on enum questions. Enums are not allowed to have a public constructor.
---18 chapter1
Q: What is the result of the following code? (Choose all that apply.)
1:  public class Swimmer {
2:      enum AnimalClasses {
3:          MAMMAL, FISH {
4:              public boolean hasFins() {
5:                  return true;
6:              }
7:          },
8:          BIRD, REPTILE, AMPHIBIAN, INVERTEBRATE;
9:      public abstract boolean hasFins();
10:     }
11:     public static void main(String[] args) {
12:         System.out.println(AnimalClasses.FISH);
13:         System.out.println(AnimalClasses.FISH.ordinal());
14:         System.out.println(AnimalClasses.FISH.hasFins());
15:         System.out.println(AnimalClasses.BIRD.hasFins());
16:     }
17: }
A.- fish
B.- FISH
C.- 0
D.- 1
E.- false
F.- true
G.+ The code does not compile.
Y: G. This question appears to be about enums but is really about abstract methods. Just as an abstract superclass requires concrete subclasses to have an implementation, abstract enum methods require each enum type to implement the method.
---19 chapter1
Q: Which of the following can be inserted to override the superclass method? (Choose all that apply.)
1:  public class LearnToWalk {
2:      public void toddle() {}
3:      class BabyRhino extends LearnToWalk {
4:          // INSERT CODE HERE
5:      }
6:  }
A.+ public void toddle() {}
B.- public void Toddle() {}
C.+ public final void toddle() {}
D.- public static void toddle() {}
E.- public void toddle() throws Exception {}
F.- public void toddle(boolean fall) {}
Y: A, C. An override must have the same method signature. A and C both do. F is an overload because it has a different parameter list. E does not compile because it throws a checked exception not declared in the superclass. D compiles but is not an override because it is static. B has a different method name, so it is not even an overload.
---20 chapter1
Q: What is the result of the following code?
1:  public class FourLegged {
2:      String walk = "walk,";
3:      static class BabyRhino extends FourLegged {
4:          String walk = "toddle,";
5:      }
5:      public static void main(String[] args) {
6:          FourLegged f = new BabyRhino();
7:          BabyRhino b = new BabyRhino();
8:          System.out.println(f.walk);
9:          System.out.println(b.walk);
10:     }
11: }
A.- toddle,toddle,
B.- toddle,walk,
C.+ walk,toddle,
D.- walk,walk,
E.- The code does not compile.
F.- A runtime exception is thrown.
Y: C. Both objects are BabyRhino objects. Virtual method invocation says that the subclass method gets called at runtime rather than the type in the variable reference. However, we are not calling methods here. We are referring to instance variables. With instance vari- ables, the reference type does matter.
---21 chapter1
Q: Which of the following could be inserted to fill in the blank? (Choose all that apply.)
1:  public interface Otter {
2:      default void play() { }
3:  }
4:  class RiverOtter implements Otter {
5:      _____________________________
6:  }
A.+ @Override public boolean equals(Object o) { return false; }
B.- @Override public boolean equals(Otter o) { return false; }
C.+ @Override public int hashCode() { return 42; }
D.- @Override public long hashCode() { return 42; }
E.+ @Override public void play() { }
F.- @Override void play() { }
Y: A, C, E. Remember that @Override means that we are implementing a method from a superclass or interface. The Object class declares methods with the signatures in Options A and C. Granted, it is a poor implementation of equals(), but it does compile. Option E is also correct because the method is declared in Otter. Option F is incorrect because meth- ods from an interface are always public. Option B is incorrect because the parameter type does not match the one in Object. Option D is incorrect because the return type does not match the one in Object.
---1 chapter2
Q: Which of the following statements about design principles and design patterns are true? (Choose all that apply.)
A.- A design principle is focused on solving a specific commonly occurring problem.
B.- Design principles and design patterns are the same thing.
C.+ Design principles are often applied throughout an application, whereas design patterns are applied to solve specific problems.
D.- Design patterns can only be applied to static classes.
E.+ Design principles and design patterns tend to produce code that is easier to maintain and easier for other developers to read.
Y: C, E. Option A is incorrect as a design pattern is focused on solving a specific commonly occurring problem. Option B is also incorrect, as design principles and design patterns are different, despite both promoting better code development. Option D is incorrect as design patterns may be applied to static or non-static classes alike. Options C and E are cor- rect statements about design principles and design patterns.
---2 chapter2
Q: What is the result of the following code?
1:  public interface CanClimb {
2:      public abstract void climb();
3:  }
4:  public interface CanClimbTrees extends CanClimb {}
5:  public abstract class Chipmunk implements CanClimbTrees {
6:      public abstract void chew(); }
7:      public class EasternChipmunk extends Chipmunk {
8:          public void chew() {
9:              System.out.println("Eastern Chipmunk is Chewing"); }
10:         }
A.- It compiles and runs without issue.
B.- The code will not compile because of line 2.
C.- The code will not compile because of line 4.
D.- The code will not compile because of line 5.
E.+ The code will not compile because of line 8.
F.- It compiles but throws an exception at runtime.
Y: E. The code does not compile because EasternChipmunk inherits the abstract method climb() but does not implement it, therefore the correct answer is E. B, C, and D are incorrect as they compile for various reasons. Line 2 compiles, as non-static and non- default interface methods are assumed to have the abstract modifier. Line 4 compiles without issue as an interface can extend another interface. Line 5 compiles without issue as an abstract class can implement an interface without implementing any of the abstract methods. F is incorrect, as Line 8 does not compile.
---3 chapter2
Q: Which of the following are valid functional interfaces? (Choose all that apply.)
1:  public interface Climb {
2:      public int climb();
3:  }
4:  public abstract class Swim {
5:      public abstract Object swim(double speed, int duration);
6:  }
7:  public interface ArcticMountainClimb extends MountainClimb {
8:      public default int getSpeed();
9:  }
10: public interface MountainClimb extends Climb {}
A.+ Climb
B.- Swim
C.- ArcticMountainClimb
D.+ MountainClimb
E.- None of these are valid functional interfaces.
Y: A, D. A is correct as Climb defines an interface with exactly one abstract method. B is incorrect, as abstract classes are not functional interfaces despite having a single abstract method. While functional interfaces may have any number of default methods, Arctic- MountainClimb will not compile due to the default method getSpeed() missing an implementation body, so C is incorrect. D is correct, as the interface MountainClimb has exactly one abstract method defined in Climb. Finally, E is incorrect because A and D are correct.
---4 chapter2
Q: Which of the following are valid lambda expressions? (Choose all that apply.)
A. () -> ""
B. x,y -> x+y
C. (Coyote y) -> return 0; D. (Camel c) -> {return;} E. Wolf w -> 39
F. () ->
G. (Animal z, m) -> a
Y: A, D. The first lambda expression is valid, taking no arguments and returning the empty string, so A is correct. B is incorrect, as more than one parameter requires parentheses (). C is incorrect, as brackets {} are required when using return. D is correct, as the expres- sion takes one Camel input and returns void. E is incorrect, as parentheses are required when using the data type Wolf. F is incorrect, as it has no right-side expression. Finally, G is incorrect, as specifying the data type for one parameter in a lambda expression requires you to specify the data type for all parameters in the expression. In this case, z has a data type and m does not, therefore the expression is invalid.
---5 chapter2
Q: What are some of the properties of using the singleton pattern? (Choose all that apply.)
A.- Singleton object can be replaced with encapsulated setter method.
B.+ Requires constructor of singleton class to be private.
C.- Singleton object must be named instance.
D.- Singleton object may be private or protected.
E.+ Ensures that there is only one instance of an object in memory.
F.+ Requires a public static method to retrieve the instance of the singleton.
Y: B, E, F. A is incorrect, as any method that changes the singleton breaks the singleton pattern. B is correct, as the constructor of the singleton class must be private, else other classes would be able to instantiate it, breaking the singleton pattern. C is incorrect, as the name of the object itself, as well as the method to retrieve the singleton, is not defined in the pattern. D is incorrect, as the object must be marked private. If it was marked protected, it would not be properly encapsulated and other classes would have access to it. E is correct, as the purpose of a singleton is to ensure that all threads share the same instance of the object in memory. F is correct, as a public static method is required for all threads to access the same singleton.
---6 chapter2
Q: What is the result of the following class?
1:  import java.util.function.*;
2:  public class Panda {
3:      int age;
4:      public static void main(String[] args) {
5:          Panda p1 = new Panda();
6:          p1.age = 1;
7:          check(p1, p -> p.age < 5); // h1
8:      }
9:      private static void check(Panda panda, Predicate<Panda> pred) { // h2
10:         String result = pred.test(panda) ? "match": "not match"; // h3
11:         System.out.print(result);
12:     }
13: }
A.+ match
B.- not match
C.- Compiler error on line h1.
D.- Compiler error on line h2.
E.- Compile error on line h3.
F.- A runtime exception is thrown.
Y: A. This code compiles and runs without issue so C, D, E, and F are incorrect. Line h1 cre- ates a lambda expression that checks if the age is less than 5. Since there is only one param- eter and it does not specify a type, the parentheses around the type parameter are optional. Line h2 uses the Predicate interface, which declares a test() method. Since test() returns true on the expression, match is output and A is correct.
---7 chapter2
Q: What changes need to be made to make the following immutable object pattern correct? (Choose all that apply.)
1:  import java.util.List;
2:  public class Seal {
3:      String name;
4:      private final List<Seal> friends;
5:      public Seal(String name, List<Seal> friends) {
6:          this.name = name;
7:          this.friends = friends;
8:      }
9:      public String getName() { return name; }
10:     public List<Seal> getFriends() { return friends; }
11: }
A.- None; the immutable object pattern is properly implemented.
B.- Have Seal implement the Immutable interface.
C.+ Mark name final and private.
D.- Add setters for name and List<Seal> friends.
E.+ Replace the getFriends() method with methods that do not give the caller direct access to the List<Seal> friends.
F.- Change the type of List<Seal> to List<Object>.
G.+ Make a copy of the List<Seal> friends in the constructor.
H.+ Mark the Seal class final.
Y: C, E, G, H. A is incorrect, as there are definitely some problems with the immutable objects implementation. B is incorrect, as there is no such thing as the Immutable inter- face defined in the Java API. C is correct, as all instance variables should be private and final to prevent them from being changed by a caller. D is incorrect, as adding settings is the opposite of what you do with the immutable object pattern. E is correct, since List<Seal> is mutable, all direct access should be removed. F is incorrect, as this has nothing to do with immutability. G is correct, as we need to copy the mutable List<Seal> to prevent the caller of the constructor from maintaining access to a mutable structure within our class. H is also correct, as it prevents the methods of the class from being overridden.
---8 chapter2
Q: Which of the following are true of interfaces? (Choose all that apply.)
A.- They can extend other classes.
B.- They cannot be extended.
C.+ They enable classes to have multiple inheritance.
D.- They can only contain abstract methods.
E.- They can be declared final.
F.+ All members of an interface are public.
Y: C, F. A and B are both incorrect as interfaces can extend other interfaces, although not classes. C is correct since a class may implement multiple interfaces. D is incorrect as inter- faces have static and default methods, as well as static final variables. E is incor- rect as interfaces are assumed to be abstract, and abstract and final can never be used together. F is correct as interface methods and variables are each assumed public.
---9 chapter2
Q: What changes need to be made to make the following singleton pattern correct? (Choose all that apply.)
1:  public class CheetahManager {
2:      public static CheetahManager cheetahManager;
3:      private CheetahManager() {}
4:      public static CheetahManager getCheetahManager() {
5:          if(cheetahManager == null) {
6:              cheetahManager = new CheetahManager();
7:          }
8:          return cheetahManager;
9:      }
10: }
A.- None; the singleton pattern is properly implemented.
B.- Rename cheetahManager to instance.
C.- Rename getCheetahManager() to getInstance().
D.+ Change the access modifier of cheetahManager from public to private.
E.- Mark cheetahManager final.
F.+ Add synchronized to getCheetahManager().
Y: D, F. A is incorrect, as there are definitely some problems with the singleton implementa- tion. B and C are incorrect, as naming of the instance variable and access method are not required as part of the pattern. The public modifier on the cheetahManager instance means that any class can access or even replace the instance, which breaks the singleton pattern; hence D is required to fix the implementation. E is incorrect, as marking the instance final would prevent lazy instantiation and as the code would not compile. F is also required, since without this step two threads could create two distinct instances of the singleton at the same time, which would violate the singleton pattern.
---10 chapter2
Q: What is the result of the following code?
1:  public interface CanWalk {
2:      default void walk() { System.out.println("Walking"); }
3:  }
4:  public interface CanRun {
5:      public default void walk() { System.out.println("Walking"); }
6:      public abstract void run();
7:  }
8:  public interface CanSprint extends CanWalk, CanRun {
9:      void sprint();
10: }
A.- The code compiles without issue.
B.- The code will not compile because of line 5.
C.- The code will not compile because of line 6.
D.+ The code will not compile because of line 8.
E.- The code will not compile because of line 9.
Y: D.WhileJavasupportsmultipleinheritancethroughinterfaces,itdoesnotsupportmethod overriding in interfaces, since it’s not clear which parent method should be used. In this example, CanWalk and CanRun both implement a default walk() method. The definition of CanSprint extends these two interfaces and therefore won’t compile as two default meth- ods with the same signature from parent classes are detected, therefore the answer is D. None of the other lines of code cause problems, so the rest of the answers are not correct.
---11 chapter2
Q: Which lambda can replace the MySecret class to return the same value? (Choose all that apply.)
1:  public interface Secret {
2:      String magic(double d);
3:  }
4:  public class MySecret implements Secret {
5:      public String magic(double d) {
6:      return "Poof";
7:      }
8:  }
A.+ caller((e) -> "Poof");
B.- caller((e) -> {"Poof"});
C.- caller((e) -> { String e = ""; "Poof" });
D.- caller((e) -> { String e = ""; return "Poof"; });
E.- caller((e) -> { String e = ""; return "Poof" });
F.+ caller((e) -> { String f = ""; return "Poof"; });
Y: A, F. B is incorrect because it does not use the return keyword. C, D, and E are incorrect because the variable e is already in use from the lambda and cannot be redefined. Addition- ally, C is missing the return keyword and E is missing the semicolon. A and F are the only correct lambda expressions that match the functional interface.
---12 chapter2
Q: What is the result of the following code?
1:   public interface Climb {
2:     boolean isTooHigh(int height, int limit);
3:   }
4:   public class Climber {
5:     public static void main(String[] args) {
6:          check((h, l) -> h.toString(), 5); // x1
7:     }
8:     private static void check(Climb climb, int height) {
9:         if (climb.isTooHigh(height, 10)) // x2 System.out.println("too high");
10:        else System.out.println("ok");
11:    }
12: }
A.- ok
B.- too high
C.+ Compiler error on line x1.
D.- Compiler error on line x2.
E.- Compiler error on a different line.
F.- A runtime exception is thrown.
Y: C. The functional interface takes two int parameters. The code on line x1 attempts to use them as if one is an Object, resulting in a compiler error making C the correct answer. It also tries to return String even though the data type for the functional interface method is boolean. It is tricky to use types in a lambda when they are implicitly specified. Remember to check the interface for the real type.
---13 chapter2
Q: Which of the following are properties of classes that define immutable objects? (Choose all that apply.)
A.- They don’t define any getter methods.
B.+ All of the instance variables marked private and final.
C.+ They don’t define any setter methods.
D.- They mark all instance variables static.
E.+ They prevent methods from being overridden.
F.- All getter methods are marked synchronized.
Y: B, C, E. Immutable objects may not be modified after creation. B, C, and E are correct statements that support this property. A is incorrect, as immutable objects may have get- ter methods, just not setter methods. D is incorrect, as static methods are not part of the immutable object pattern. F is also incorrect, as the getter methods are not required to be marked synchronized.
---14 chapter2
Q: Which of the following statements can be inserted in the blank line so that the code will compile successfully? (Choose all that apply.)
1:  public interface CanHop {}
2:  public class Frog implements CanHop {
3:      public static void main(String[] args) {
4:          _______________ frog = new TurtleFrog();
5:      }
6:  }
7:  public class BrazilianHornedFrog extends Frog {}
8:  public class TurtleFrog extends Frog {}
A.+ Frog
B.+ TurtleFrog
C.- BrazilianHornedFrog
D.+ CanHop
E.+ Object
F.- Long
Y: A, B, D, E. The blank can be filled with any class or interface that is a supertype of Tur- tleFrog. A is a superclass of TurtleFrog, and B is the same class, so both are correct. BrazilianHornedFrog is not a superclass of TurtleFrog, so C is incorrect. TurtleFrog inherits the CanHop interface, so D is correct. All classes inherit Object, so E is correct. Finally, Long is an unrelated class that is not a superclass of TurtleFrog, and it is therefore incorrect.
---15 chapter2
Q: Which of the following statements about polymorphism are true? (Choose all that apply.)
A.- A reference to an object may be cast to a subclass of the object without an explicit cast.
B.+ If a method takes a class that is the superclass of three different object references, then any of those objects may be passed as a parameter to the method.
C.+ A reference to an object may be cast to a superclass of the object without an explicit cast.
D.- All cast exceptions can be detected at compile time.
E.- By defining a public instance method in the superclass, you guarantee that the specific method will be called in the parent class at runtime.
Y: B, C. A reference to an object requires an explicit cast if referenced with a subclass, so A is incorrect. If the cast is to a superclass reference, then an explicit cast is not required, so C is correct. If a method takes the superclass of an object as a parameter, then any subclass ref- erences may be used without a cast, so B is correct. Some cast exceptions can be detected as errors at compile-time, but others can only be detected at runtime, so D is incorrect. Due to the nature of polymorphism, a public instance method can be overridden in a subclass and calls to it will be replaced even in the superclass in which it was defined, so E is incorrect.
---16 chapter2
Q: Choose the correct statement about the following code:
1:  public interface Herbivore {
2:      int amount = 10;
3:      public static void eatGrass();
4:      public int chew() {
5:          return 13;
6:      }
7:  }
A.- It compiles and runs without issue.
B.- The code will not compile because of line 2.
C.- The code will not compile because of line 3.
D.- The code will not compile because of line 4.
E.- The code will not compile because of lines 2 and 3.
F.+ The code will not compile because of lines 3 and 4.
Y: F. The interface variable amount is correctly declared, with public, static, and final being assumed and automatically inserted by the compiler, so B is incorrect. The method declaration for eatGrass() on line 3 is incorrect because the method has been marked as static but no method body has been provided. The method declaration for chew() on line 4 is also incorrect, since an interface method that provides a body must be marked as default or static explicitly. Therefore, F is the correct answer since this code contains two compile-time errors.
---17 chapter2
Q: Which of the following are properties of classes that are properly encapsulated as a JavaBean? (Choose all that apply.)
A.- All instance variables are marked final.
B.+ boolean instance variables are accessed with is or get.
C.+ All instance variables are marked private.
D.- They implement the JavaBean interface.
E.- Variables are created using lazy instantiation.
F.+ The first letter of the any getter/setter, after the get, set, or is prefix, must be uppercase.
Y: B, C, F. Options B, C, and F are each correct statements about JavaBean encapsulation. A is incorrect, as that is a property of the immutable object pattern, not encapsulation. D is incorrect, as there is no such JavaBean interface defined in the Java API. Finally, E is incorrect, as handling instantiation is not part of encapsulation.
---18 chapter2
Q: Which of the following statements about inheritance and object composition are correct? (Choose all that apply.)
A.+ Inheritance supports access to protected variables.
B.+ Object composition tends to promote greater code reuse than inheritance.
C.- Inheritance relies on the has‐a principle.
D.- Object composition supports method overriding at runtime.
E.+ Object composition requires a class variable to be declared public or accessible from a public method to be used by a class in a different package.
F.- Object composition is always preferred to inheritance.
Y: A, B, E. A is correct, and it is one of the reasons to prefer class inheritance over object composition. B is also correct, since object composition tends to lead to classes that are easier to reference, as they don’t require knowledge of any parent classes. C is incorrect, as inheritance tends to use the is-a principle, whereas object composition relies on the has-a principle. D is incorrect, as this is a statement about inheritance, not object composition. E is correct, as object composition has no notion of inheritance and variables must be exposed publically if they are to be used by other classes in different packages. F is incor- rect, as neither are always the right answer. There are situations where inheritance is more appropriate, and situations where object composition is more appropriate.
---19 chapter2
Q: Which three scenarios would best benefit from using a singleton pattern? (Choose all three.)
A.- Create read‐only objects that are thread‐safe.
B.+ Manage a reusable cache of objects.
C.- Ensure that all objects are lazily instantiated.
D.+ Manage write access to a log file.
E.+ Provide central access to application configuration data.
F.- Allow multiple instances of a static object to be managed in memory.
Y: B, D, E. A is incorrect, as that is a property of the immutable object pattern. B is correct, as caching data is one of the most common uses of the singleton pattern. While the singleton pattern may use lazy instantiation, it is not used to ensure that objects are lazily instanti- ated, so C is incorrect. D is correct, as we only want one class writing to a log file at once. E is also correct, as managing application-wide configuration data is another very common use of the singleton pattern. F is incorrect, as we only want one instance of a static object created when using the singleton pattern.
---20 chapter2
Q: Choose the correct statement about the following code:
1:  public interface CanFly {
2:      void fly();
3:  }
4:  interface HasWings {
5:      public abstract Object getWingSpan();
6:  }
7:  abstract class Falcon implements CanFly, HasWings {
8:  }
A.+ It compiles without issue.
B.- The code will not compile because of line 2.
C.- The code will not compile because of line 4.
D.- The code will not compile because of line 5.
E.- The code will not compile because of lines 2 and 5.
F.- The code will not compile because the class Falcon doesn’t implement the interface methods.
Y: A. Although the definition of methods on lines 2 and 5 vary, both will be converted to public abstract by the compiler. Line 4 is fine, because an interface can have public or default access. Finally, the class Falcon doesn’t need to implement the interface methods because it is marked as abstract. Therefore, the code will compile without issue.